{"version":3,"sources":["logo.svg","components/navbar/NavBar.js","components/search-results/SearchResults.js","model/searchState.js","components/searchbar/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","title","SearchResults","imageListContent","setSearchState","searchState","loading","observer","page","useRef","lastImageElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","console","log","isIntersecting","previousSearchState","observe","handleLike","alert","images","GridList","col","map","img","index","length","tags","subtitle","ref","user","views","likes","actionIcon","onClick","color","src","largeImageURL","alt","id","SearchState","searchText","order","apiURL","apiKey","SearchBar","useState","SearchStateObject","setLoading","searchPage","searchOrder","searchColor","useEffect","cancel","axios","method","url","cancelToken","CancelToken","c","then","res","data","hits","catch","err","name","value","onChange","e","target","floatingLabelText","fullWidth","primaryText","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb8bf6a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <AppBar title=\"INFINITE SCROLL IMAGE BROWSER\"/>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useRef, useCallback } from 'react';\r\nimport PropType from 'prop-types';\r\nimport { GridList, GridTile } from \"material-ui/GridList\";\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ThumbsUp from 'material-ui/svg-icons/action/thumb-up';\r\n\r\nconst SearchResults = ({setSearchState, searchState, loading }) => {\r\n\r\n    let imageListContent;\r\n    let pageNumber = searchState.page;\r\n\r\n    const observer = useRef();\r\n    const lastImageElementRef = useCallback((node)=>{\r\n\r\n        //check loading and stop\r\n        if(loading) return;\r\n\r\n        if(observer.current) observer.current.disconnect();\r\n\r\n        observer.current = new IntersectionObserver( entries => {\r\n            console.log(\"Observing\");\r\n            if(entries[0].isIntersecting){\r\n                console.log(\" Visible!!!!!\");\r\n                setSearchState(previousSearchState => {return {...previousSearchState, page: previousSearchState.page+1} });\r\n            }\r\n\r\n        }) ;\r\n        \r\n        if(node)\r\n            observer.current.observe(node);\r\n    },[ loading]);\r\n\r\n\r\n    const handleLike = ()=>{\r\n        alert(\"Thank you for upvoting the image!\");\r\n        //You can do more thing like updating states and calling api call to update the number of likes\r\n        //...\r\n    }\r\n\r\n    if(searchState.images){\r\n        imageListContent = (\r\n            <GridList col={3}>\r\n                {\r\n                    searchState.images.map( (img, index) => {\r\n\r\n                        if ( searchState.images.length === index+1){\r\n                            return (\r\n                                <GridTile title={img.tags} key={img.id} subtitle={<span ref={lastImageElementRef} > by {img.user} - {img.views} views - {img.likes} likes</span>} actionIcon={<IconButton onClick={handleLike}><ThumbsUp color=\"white\"/></IconButton>} >\r\n                                    <img src={img.largeImageURL} alt=\"\"/>\r\n                                </GridTile>\r\n                            )\r\n                        }else{\r\n                            return (<GridTile title={img.tags} key={img.id} subtitle={<span> by {img.user} - {img.views} views - {img.likes} likes</span>} actionIcon={<IconButton onClick={handleLike}><ThumbsUp color=\"white\"/></IconButton>} >\r\n\r\n                                <img src={img.largeImageURL} alt=\"\"/>\r\n    \r\n                            </GridTile>)\r\n                        }    \r\n\r\n\r\n                     } )}\r\n            </GridList>    \r\n        )\r\n    }else{\r\n        imageListContent = null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {imageListContent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResults;\r\n\r\n\r\n","//Default SearchState Object according to the pixabay api\r\nconst SearchState = {\r\n    searchText: \"\",\r\n    page: 1,\r\n    color: \"\",\r\n    order: \"popular\",\r\n    apiURL: \"https://pixabay.com/api/\",\r\n    apiKey: \"11564517-84b49995a08b6211495e54cc9\",\r\n    images: []\r\n}\r\n\r\nexport default SearchState;","import { useEffect, useState } from 'react';\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport SearchResults from '../search-results/SearchResults';\r\nimport SearchStateObject from '../../model/searchState';\r\nimport axios from 'axios';\r\n\r\n\r\n// let timeout = 0;\r\n\r\nconst SearchBar = () => {\r\n    \r\n    //Variable Declarations\r\n    const [searchState, setSearchState] = useState(SearchStateObject);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let searchText = searchState.searchText;\r\n    let searchPage = searchState.page;\r\n    let searchOrder = searchState.order;\r\n    let searchColor = searchState.color;\r\n\r\n    useEffect(() => {\r\n        setSearchState({\r\n            ...searchState,\r\n            images: []\r\n        });\r\n    },[searchText])\r\n\r\n    useEffect(() => {\r\n        //new state after user typed from the last frame\r\n\r\n\r\n        let cancel;\r\n        setLoading(true);\r\n\r\n        //*Implemented - alternatively, you can use cancel token to mimic the infinite scroll\r\n        //call api call after user finishes typing\r\n        axios({\r\n            method: 'GET',\r\n            url:`\r\n            ${SearchStateObject.apiURL}/?key=${SearchStateObject.apiKey}&q=${searchState.searchText}&image_type=photo&page=${searchState.page}&order=${searchState.order}&colors=${searchState.color}&safesearch=true`,\r\n            cancelToken: new axios.CancelToken(c => cancel = c),\r\n        })\r\n        .then((res)=>{\r\n\r\n            setSearchState({\r\n                ...searchState,\r\n                images: [...searchState.images, ...res.data.hits]\r\n            });\r\n\r\n            //Finished loading\r\n            setLoading(false); \r\n\r\n        }).catch((err)=> console.log(err))\r\n\r\n        return ()=>{\r\n            return cancel();\r\n        }\r\n\r\n    }, [searchText, searchPage, searchOrder, searchColor]);\r\n\r\n\r\n    const onSearchTerm = (e) => {\r\n        setSearchState({\r\n            ...searchState,\r\n           searchText : e.target.value\r\n        });\r\n    }\r\n\r\n    const onColorChange = (e, index, value) => {\r\n        //Check if search Color is changed, if it is, then reset the current color to \"\" \r\n        setSearchState({\r\n            ...searchState,\r\n            images:[],\r\n            color: value == \"default\"? \"\": value\r\n        });\r\n    }\r\n\r\n    const onOrderChange = (e, index, value) => {\r\n        //Check if searchOrder is changed, if it is replace the current images\r\n        setSearchState({\r\n            ...searchState,\r\n            images:[],\r\n            order: value\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"Search-bar-container\">\r\n            <TextField \r\n                name=\"searchText\"\r\n                value={searchState.searchText}\r\n                onChange= {onSearchTerm}\r\n                floatingLabelText=\"Search Your Images\"\r\n                fullWidth={true}\r\n            />\r\n\r\n            <br/>\r\n\r\n            <SelectField name=\"color\" floatingLabelText=\"Color\" value={searchState.color} onChange={onColorChange}>\r\n                <MenuItem value={\"default\"} primaryText=\"Default\" />\r\n                <MenuItem value={\"red\"} primaryText=\"Red\" />\r\n                <MenuItem value={\"orange\"} primaryText=\"Orange\" />\r\n                <MenuItem value={\"yellow\"} primaryText=\"Yellow\" />\r\n                <MenuItem value={\"green\"} primaryText=\"Green\" />\r\n                <MenuItem value={\"blue\"} primaryText=\"Blue\" />\r\n            </SelectField>\r\n\r\n            <SelectField name=\"order\" floatingLabelText=\"Order\" value={searchState.order} onChange={onOrderChange}>\r\n                <MenuItem value={\"popular\"} primaryText=\"Popular\" />\r\n                <MenuItem value={\"latest\"} primaryText=\"Latest\" />\r\n            </SelectField>\r\n\r\n            <br/>\r\n\r\n\r\n            { searchState.images.length > 0 ? <SearchResults setSearchState={setSearchState} searchState={searchState} loading={loading}/> : null }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nimport NavBar from './components/navbar/NavBar';\nimport SearchBar from './components/searchbar/SearchBar';\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n\n      <div className=\"App\">\n            <NavBar/>\n            <SearchBar/>\n      </div>\n    </MuiThemeProvider>    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}